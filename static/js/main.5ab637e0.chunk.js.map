{"version":3,"sources":["StoneElement.js","Stone.js","Field.js","AvatarSelect.js","Game.js","reportWebVitals.js","index.js"],"names":["StoneElement","props","className","style","background","color","value","Stone","stone_element","hexcolor","added_value","parseInt","substr","toString","createStoneElement","width","size","height","backgroundColor","isSettable","onClick","Field","createStone","position","stone","on_click","is_settable","i","settablePositions","length","row","col","setStone","initFieldLine","stone_line","data","push","field_stones","stone_field","initFiled","AvatarSelect","type","onChange","e","setState","target","onChangeColor","accept","image","files","reader","FileReader","addEventListener","result","readAsDataURL","onChangeImage","createInitField","field_size","player_colors","field","JSON","parse","stringify","Array","fill","createEmptyField","base_position","Game","useState","isGameStart","setIsGameStart","isGameEnd","setIsGameEnd","fieldSize","setFieldSize","playerNames","setPlayerNames","playerColors","setPlayerColors","turn","setTurn","fieldData","setFieldData","points","setPoints","setSettablePositions","setPlayerColor","index","onChangePlayerName","name","isNaN","getSettablePositions","settable_positions","getReversiblePositions","changeStoneColor","field_data","new_field_data","slice","stone_data","addStoneValue","num","directions","reversible_positions","ope","now_position","tmp_reversible_positions","is_detected","concat","startGame","min","max","Math","ceil","floor","random","useEffect","k","getPoints","console","log","startNextTurn","checkGameEnd","endGame","display","marginLeft","marginRight","positions","forEach","color_index","reverseStones","visibility","opacity","avatar","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ab637e0.chunk.js","sourcesContent":["import React from \"react\";\n\n\nexport default function StoneElement(props){\n    return(\n        <div className={`stoneElement ${props.className}`} style={{background: props.color}}>{props.value}</div>\n    )\n}\n","import React from \"react\";\n\nimport \"./Game.css\";\nimport StoneElement from \"./StoneElement\";\n\n\nexport default function Stone(props){\n    const blackOrWhite  = (hexcolor) => {\n        if(hexcolor[0] !== \"#\") return \"white\";\n\n        const r = parseInt( hexcolor.substr( 1, 2 ), 16 ) ;\n        const g = parseInt( hexcolor.substr( 3, 2 ), 16 ) ;\n        const b = parseInt( hexcolor.substr( 5, 2 ), 16 ) ;\n\n        return ( ( ( (r * 299) + (g * 587) + (b * 114) ) / 1000 ) < 128 ) ? \"white\" : \"black\" ;\n    }\n\n    const createStoneElement = () => {\n        if(props.color === null) return null;\n        const added_value = props.value <= 1 ? null : <span style={{color: blackOrWhite(props.color)}}>{\"+\" + (props.value - 1).toString()}</span>;\n        return <StoneElement color={props.color} value={added_value} />\n    }\n    const stone_element = createStoneElement();\n\n    return(\n        <div\n            style={{\n                width: props.size,\n                height: props.size,\n                backgroundColor: props.isSettable ? \"#ffa399\" : \"transparent\"\n            }}\n            className=\"stoneFrame\"\n            onClick={() => props.onClick()}>\n            {stone_element}\n        </div>\n    );\n}\n","import React from \"react\";\nimport Stone from \"./Stone\";\n\nimport \"./Game.css\";\n\n\nexport default function Field(props){\n    const createStone = (position, stone) => {\n        let is_settable = false;\n        for (let i = 0; i < props.settablePositions.length; i++) {\n            if (props.settablePositions[i].row === position.row && props.settablePositions[i].col === position.col) {\n                is_settable = true;\n                break;\n            }\n        }\n\n        let on_click;\n        if(stone.color === null && is_settable){\n            on_click = () => props.setStone(position);\n        }else{\n            on_click = () => {};\n        }\n\n        return <Stone\n            key={position.row.toString() + position.col.toString()}\n            size={(80 / props.size).toString() + \"vmin\"}\n            color={stone.color}\n            value={stone.value}\n            isSettable={is_settable}\n            onClick={on_click}\n        />;\n    };\n\n    const initFieldLine = (row) => {\n        let stone_line = [];\n        for(let col = 0; col < props.size; col++){\n            const position = {row: row, col: col};\n            const stone = createStone(position, props.data[row][col]);\n            stone_line.push(stone);\n        }\n        return <div key={row.toString()} className=\"fieldLine\">{stone_line}</div>;\n    };\n\n    const initFiled = () => {\n        let stone_field = [];\n        for(let row = 0; row < props.size; row++){\n            stone_field.push(initFieldLine(row));\n        }\n        return <div className=\"field\">{stone_field}</div>;\n    };\n\n    const field_stones = initFiled();\n\n    return(\n        <div className=\"fieldWrapper\">{field_stones}</div>\n    );\n}\n","import React from \"react\";\n\n\nexport default function AvatarSelect(props){\n    const onChangeColor = (e) => {\n        props.setState(e.target.value);\n    };\n\n    const onChangeImage = (e) => {\n        const image = e.target.files[0];\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            props.setState(`url(${reader.result})`);\n        });\n        reader.readAsDataURL(image);\n    };\n\n    return(\n        <div>\n            <input type=\"color\" onChange={(e) => onChangeColor(e)} />\n            <input type=\"file\" accept=\"image/*\" onChange={(e) => onChangeImage(e)} />\n        </div>\n    );\n}\n","import React , { useState, useEffect } from \"react\";\n\nimport './Game.css';\nimport Field from \"./Field\";\nimport StoneElement from \"./StoneElement\";\nimport AvatarSelect from \"./AvatarSelect\";\n\n\nconst shuffle = (ary) => {\n    ary = ary.slice();\n    for(let i = ary.length - 1; i > 0; i--){\n        let r = Math.floor(Math.random() * (i + 1));\n        let tmp = ary[i];\n        ary[i] = ary[r];\n        ary[r] = tmp;\n    }\n    return ary;\n};\n\nconst getRandomIntInclusive = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\n};\n\nconst createEmptyField = (field_size) => {\n    return JSON.parse(JSON.stringify(Array(field_size).fill(Array(field_size).fill({\n        color: null,\n        value: 0\n    }))));\n};\n\nconst createInitField = (field_size, player_colors) => {\n    let field = createEmptyField(field_size);\n    const base_position = {row: field_size / 2 - 2, col: field_size / 2 - 2};\n\n    field[base_position.row][base_position.col] = {color: player_colors[0], value: 1};\n    field[base_position.row][base_position.col + 1] = {color: player_colors[1], value: 1};\n    field[base_position.row][base_position.col + 2] = {color: player_colors[2], value: 1};\n    field[base_position.row][base_position.col + 3] = {color: player_colors[3], value: 1};\n\n    field[base_position.row + 1][base_position.col] = {color: player_colors[1], value: 1};\n    field[base_position.row + 1][base_position.col + 1] = {color: player_colors[0], value: 1};\n    field[base_position.row + 1][base_position.col + 2] = {color: player_colors[3], value: 1};\n    field[base_position.row + 1][base_position.col + 3] = {color: player_colors[2], value: 1};\n\n    field[base_position.row + 2][base_position.col] = {color: player_colors[2], value: 1};\n    field[base_position.row + 2][base_position.col + 1] = {color: player_colors[3], value: 1};\n    field[base_position.row + 2][base_position.col + 2] = {color: player_colors[0], value: 1};\n    field[base_position.row + 2][base_position.col + 3] = {color: player_colors[1], value: 1};\n\n    field[base_position.row + 3][base_position.col] = {color: player_colors[3], value: 1};\n    field[base_position.row + 3][base_position.col + 1] = {color: player_colors[2], value: 1};\n    field[base_position.row + 3][base_position.col + 2] = {color: player_colors[1], value: 1};\n    field[base_position.row + 3][base_position.col + 3] = {color: player_colors[0], value: 1};\n\n    return field;\n};\n\n\nexport default function Game() {\n    const [isGameStart, setIsGameStart] = useState(false);\n    const [isGameEnd, setIsGameEnd] = useState(false);\n\n    const [fieldSize, setFieldSize] = useState(10);\n    const [playerNames, setPlayerNames] = useState([\"player1\", \"player2\"]);  // p1とp2の名前をランダムで入れ替えれば先行のランダム性が確保できる\n    const [playerColors, setPlayerColors] = useState([\"black\", \"red\", \"blue\", \"green\"]);  // [p1, p2, p1, p2]\n\n    const [turn, setTurn] = useState(0);\n    const [fieldData, setFieldData] = useState(null);\n    const [points, setPoints] = useState([0, 0]);\n    const [settablePositions, setSettablePositions] = useState([]);\n\n\n    const setPlayerColor = (color, index) => {\n        let player_colors = JSON.parse(JSON.stringify(playerColors));\n        player_colors[index] = color;\n        setPlayerColors(player_colors);\n    };\n\n    const onChangePlayerName = (e) => {\n        switch(e.target.name){\n            case \"player0\":\n                setPlayerNames([e.target.value, playerNames[1]]);\n                break;\n            case \"player1\":\n                const field_size = parseInt(e.target.value);\n                if(playerNames[0] === \"size\" && !isNaN(field_size)){\n                    // 隠しコマンド(size, num)で4以上100以下の値に盤面の大きさを変えられる\n                    if(field_size >= 4 && field_size <= 100) setFieldSize(field_size);\n                }\n                setPlayerNames([playerNames[0], e.target.value]);\n                break;\n        }\n    };\n\n    const checkGameEnd = () => {\n        for(let row = 0; row < fieldData.length; row++){\n            for(let col = 0; col < fieldData[row].length; col++){\n                if(fieldData[row][col].color === null) return false;\n            }\n        }\n        return true;\n    };\n\n    const getPoints = () => {\n        let result = [0, 0];\n        for(let row = 0; row < fieldData.length; row++){\n            for(let col = 0; col < fieldData[row].length; col++){\n                for(let k = 0; k < playerColors.length; k++){\n                    if(fieldData[row][col].color === playerColors[k]){\n                        result[k % 2] += fieldData[row][col].value ** 2;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    const getSettablePositions = (color) => {\n        let settable_positions = [];\n        for(let row = 0; row < fieldSize; row++){\n            for(let col = 0; col < fieldSize; col++){\n                let position = {row: row, col: col};\n                if(fieldData[position.row][position.col].color === null){\n                    if(getReversiblePositions(position, color) != false) settable_positions.push(position);\n                }\n            }\n        }\n        return settable_positions;\n    }\n\n    const changeStoneColor = (field_data, position, color) => {\n        let new_field_data = field_data.slice();\n        let stone_data = new_field_data[position.row][position.col];\n        stone_data.color = color;\n        new_field_data[position.row][position.col] = stone_data;\n        return new_field_data;\n    };\n\n    const addStoneValue = (field_data, position, num) => {\n        let new_field_data = field_data.slice();\n        let stone_data = new_field_data[position.row][position.col];\n        stone_data.value = stone_data.value + num;\n        new_field_data[position.row][position.col] = stone_data;\n        return new_field_data;\n    };\n\n    const reverseStones = (field_data, positions, color) => {\n        let new_field_data = field_data.slice();\n\n        positions.forEach((position) => {\n            if(new_field_data[position.row][position.col].color === color) return;\n            if(new_field_data[position.row][position.col].color === null){\n                new_field_data = changeStoneColor(new_field_data, position, color);\n                new_field_data = addStoneValue(new_field_data, position, 1);\n                return new_field_data;\n            }\n\n            let color_index = null;\n            for(let i = 0; i < playerColors.length; i++){\n                if(new_field_data[position.row][position.col].color === playerColors[i]) color_index = i;\n            }\n            if(color_index === null) return;\n\n            if(turn % 2 === color_index % 2){\n                // 自分の他の色のとき\n                new_field_data = changeStoneColor(new_field_data, position, color);\n                new_field_data = addStoneValue(new_field_data, position, 1);\n            }else{\n                if(new_field_data[position.row][position.col].value >= 2){\n                    new_field_data = addStoneValue(new_field_data, position, -1);\n                }else{\n                    new_field_data = changeStoneColor(new_field_data, position, color);\n                }\n            }\n        });\n\n        return new_field_data;\n    };\n\n    const getReversiblePositions = (position, color) => {\n        const directions = [\n            [1, 0], [0, 1], [1, 1], [-1, 1]\n        ];\n\n        let reversible_positions = [JSON.parse(JSON.stringify(position))];\n        for(let i = 0; i < directions.length; i++){\n            for(let ope = -1; ope <= 1; ope += 2){\n                let now_position = JSON.parse(JSON.stringify(position));\n                let tmp_reversible_positions = [];\n                let is_detected = false;\n\n                now_position.row += ope * directions[i][0];\n                now_position.col += ope * directions[i][1];\n                while(now_position.row >= 0 && now_position.row < fieldSize && now_position.col >= 0 && now_position.col < fieldSize){\n                    if(fieldData[now_position.row][now_position.col].color === null) break;\n                    if(fieldData[now_position.row][now_position.col].color === color){\n                        is_detected = true;\n                        break;\n                    }\n\n                    tmp_reversible_positions.push(JSON.parse(JSON.stringify(now_position)));\n                    now_position.row += ope * directions[i][0];\n                    now_position.col += ope * directions[i][1];\n                }\n                if(is_detected) reversible_positions = reversible_positions.concat(tmp_reversible_positions);\n            }\n        }\n        if(reversible_positions.length <= 1) reversible_positions = [];\n        return reversible_positions;\n    };\n\n\n    const startGame = () => {\n        setFieldData(createInitField(fieldSize, playerColors));\n        // setPlayerNames(shuffle(playerNames));\n        setTurn(getRandomIntInclusive(0, 1));\n        setIsGameStart(true);\n    };\n\n    const setStone = (position) => {\n        if(fieldData[position.row][position.col].color !== null) return;\n\n        const reversible_positions = getReversiblePositions(position, playerColors[turn % 4]);\n        if(reversible_positions == false) return;\n\n        let new_field_data = fieldData.slice();\n        new_field_data = reverseStones(new_field_data, reversible_positions, playerColors[turn % 4]);\n        setFieldData(new_field_data);\n\n        console.log(JSON.stringify({field: new_field_data}));\n\n        startNextTurn();\n    };\n\n    useEffect(() => {\n        if(fieldData === null) return;\n\n        setPoints(getPoints());\n\n        let settable_positions = getSettablePositions(playerColors[turn % 4]);\n        if(settable_positions == false){\n            console.log(\"pass\");\n            settable_positions = getSettablePositions(playerColors[(turn + 1) % 4]);\n            setSettablePositions(settable_positions);\n            startNextTurn();\n        }else{\n            setSettablePositions(settable_positions);\n        }\n    }, [fieldData]);\n\n    const startNextTurn = () => {\n        if(checkGameEnd()){\n            endGame();\n            return;\n        }\n\n        if(setSettablePositions == false){\n            console.log(\"pass\");\n            startNextTurn();\n            return;\n        }\n\n        setTurn(turn + 1);\n    };\n\n    const endGame = () => {\n        setIsGameEnd(true);\n    };\n\n    return(\n        <div>\n            {!isGameStart ?\n                <div>\n                    <div>\n                        <input name=\"player0\" type=\"text\" value={playerNames[0]} onChange={(e) => onChangePlayerName(e)} />\n                        <p>色1</p>\n                        <AvatarSelect setState={(avatar) => {\n                            if(!playerColors.includes(avatar)) setPlayerColor(avatar, 0);\n                        }} />\n                        <p>色2</p>\n                        <AvatarSelect setState={(avatar) => {\n                            if(!playerColors.includes(avatar)) setPlayerColor(avatar, 2);\n                        }} />\n                    </div>\n                    <div>\n                        <input name=\"player1\" type=\"text\" value={playerNames[1]} onChange={(e) => onChangePlayerName(e)} />\n                        <p>色1</p>\n                        <AvatarSelect setState={(avatar) => {\n                            if(!playerColors.includes(avatar)) setPlayerColor(avatar, 1);\n                        }} />\n                        <p>色2</p>\n                        <AvatarSelect setState={(avatar) => {\n                            if(!playerColors.includes(avatar)) setPlayerColor(avatar, 3);\n                        }} />\n                    </div>\n                    <button type=\"button\" onClick={() => startGame()}>start</button>\n                </div>\n            :\n                <div>\n                    <div>\n                        <div>\n                            <div style={{display: \"inline-block\"}}>{playerNames[0]}: <StoneElement className=\"infoStone\" color={playerColors[0]} value={null} />　<StoneElement className=\"infoStone\" color={playerColors[2]} value={null} /></div>\n                            <div style={{display: \"inline-block\", marginLeft: \"50px\"}}>{playerNames[1]}: <StoneElement className=\"infoStone\" color={playerColors[1]} value={null} />　<StoneElement className=\"infoStone\" color={playerColors[3]} value={null} /></div>\n                        </div>\n                        <div style={{display: \"inline-block\", marginRight: \"50px\"}}>turn:　<StoneElement className=\"infoStone\" color={playerColors[turn % 4]} value={null} /></div>\n                        <span>{playerNames[0]}: {points[0]}　</span>\n                        <span>{playerNames[1]}: {points[1]}</span>\n                        <Field data={fieldData} size={fieldSize} setStone={isGameEnd ? () => {} : setStone} settablePositions={settablePositions} />\n                    </div>\n                    <div className=\"fadeTrans fullScreen\" style={{visibility: isGameEnd ? \"visible\" : \"hidden\", opacity: isGameEnd ? 1 : 0}}>\n                        end\n                    </div>\n                </div>\n            }\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}