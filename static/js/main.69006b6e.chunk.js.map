{"version":3,"sources":["StoneElement.js","Stone.js","Field.js","AvatarSelect.js","Dialog.js","Game.js","reportWebVitals.js","index.js"],"names":["StoneElement","props","className","style","background","color","value","Stone","stone_element","hexcolor","added_value","parseInt","substr","toString","createStoneElement","width","size","height","backgroundColor","isSettable","onClick","Field","createStone","position","stone","on_click","is_settable","i","settablePositions","length","row","col","setStone","initFieldLine","stone_line","data","push","field_stones","stone_field","concat","initFiled","AvatarSelect","type","defaultColor","onChange","e","setState","target","onChangeColor","accept","image","files","reader","FileReader","addEventListener","result","readAsDataURL","onChangeImage","Dialog","visibility","visible","opacity","closeDialog","children","createInitField","field_size","player_colors","field","JSON","parse","stringify","Array","fill","createEmptyField","base_position","Game","useState","isGameStart","setIsGameStart","isGameEnd","setIsGameEnd","fieldSize","setFieldSize","playerNames","setPlayerNames","playerColors","setPlayerColors","turn","setTurn","fieldData","setFieldData","points","setPoints","setSettablePositions","dialog","setDialog","setPlayerColor","index","onChangePlayerName","name","isNaN","getSettablePositions","settable_positions","getReversiblePositions","changeStoneColor","field_data","new_field_data","slice","stone_data","addStoneValue","num","directions","reversible_positions","ope","now_position","tmp_reversible_positions","is_detected","startGame","min","max","Math","ceil","floor","random","useEffect","k","getPoints","startNextTurn","checkGameEnd","endGame","positions","forEach","color_index","reverseStones","TwitterShareButton","url","title","abs","TwitterIcon","round","display","marginRight","avatar","includes","marginLeft","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69006b6e.chunk.js","sourcesContent":["import React from \"react\";\n\n\nexport default function StoneElement(props){\n    return(\n        <div className={`stoneElement ${props.className}`} style={{background: props.color}}>{props.value}</div>\n    )\n}\n","import React from \"react\";\n\nimport \"./Game.css\";\nimport StoneElement from \"./StoneElement\";\n\n\nexport default function Stone(props){\n    const blackOrWhite  = (hexcolor) => {\n        if(hexcolor[0] !== \"#\") return \"white\";\n\n        const r = parseInt( hexcolor.substr( 1, 2 ), 16 ) ;\n        const g = parseInt( hexcolor.substr( 3, 2 ), 16 ) ;\n        const b = parseInt( hexcolor.substr( 5, 2 ), 16 ) ;\n\n        return ( ( ( (r * 299) + (g * 587) + (b * 114) ) / 1000 ) < 128 ) ? \"white\" : \"black\" ;\n    }\n\n    const createStoneElement = () => {\n        if(props.color === null) return null;\n        const added_value = props.value <= 1 ? null : <span style={{color: blackOrWhite(props.color)}}>{\"+\" + (props.value - 1).toString()}</span>;\n        return <StoneElement color={props.color} value={added_value} />\n    }\n    const stone_element = createStoneElement();\n\n    return(\n        <div\n            style={{\n                width: props.size,\n                height: props.size,\n                backgroundColor: props.isSettable ? \"#ffa399\" : \"transparent\"\n            }}\n            className=\"stoneFrame\"\n            onClick={() => props.onClick()}>\n            {stone_element}\n        </div>\n    );\n}\n","import React from \"react\";\nimport Stone from \"./Stone\";\n\nimport \"./Game.css\";\n\n\nexport default function Field(props){\n    const createStone = (position, stone) => {\n        let is_settable = false;\n        for (let i = 0; i < props.settablePositions.length; i++) {\n            if (props.settablePositions[i].row === position.row && props.settablePositions[i].col === position.col) {\n                is_settable = true;\n                break;\n            }\n        }\n\n        let on_click;\n        if(stone.color === null && is_settable){\n            on_click = () => props.setStone(position);\n        }else{\n            on_click = () => {};\n        }\n\n        return <Stone\n            key={position.row.toString() + position.col.toString()}\n            size={(100 / props.size).toString() + \"%\"}\n            color={stone.color}\n            value={stone.value}\n            isSettable={is_settable}\n            onClick={on_click}\n        />;\n    };\n\n    const initFieldLine = (row) => {\n        let stone_line = [];\n        for(let col = 0; col < props.size; col++){\n            const position = {row: row, col: col};\n            const stone = createStone(position, props.data[row][col]);\n            stone_line.push(stone);\n        }\n        // return <div key={row.toString()} className=\"fieldLine\" style={{height: 100 / props.size + \"%\"}}>{stone_line}</div>;\n        return stone_line;\n    };\n\n    const initFiled = () => {\n        let stone_field = [];\n        for(let row = 0; row < props.size; row++){\n            stone_field = stone_field.concat(initFieldLine(row));\n        }\n\n        return <div className=\"field\">{stone_field}</div>;\n    };\n\n    const field_stones = initFiled();\n\n    return(\n        <div className=\"fieldWrapper\">{field_stones}</div>\n    );\n}\n","import React from \"react\";\n\n\nexport default function AvatarSelect(props){\n    const onChangeColor = (e) => {\n        props.setState(e.target.value);\n    };\n\n    const onChangeImage = (e) => {\n        const image = e.target.files[0];\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            props.setState(`url(${reader.result})`);\n        });\n        reader.readAsDataURL(image);\n    };\n\n    return(\n        <div>\n            <input type=\"color\" value={props.defaultColor} onChange={(e) => onChangeColor(e)} />\n            <input type=\"file\" accept=\"image/*\" onChange={(e) => onChangeImage(e)} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./Game.css\";\n\n\nexport default function Dialog(props) {\n    return (\n        <div\n            style={{visibility: props.visible ? \"visible\" : \"hidden\", opacity: props.visible ? 1 : 0}}\n        >\n            <div className=\"dialogInner\">\n                <button className=\"dialogCloseButton\" type=\"button\" onClick={() => props.closeDialog()}>×</button>\n                {props.children}\n            </div>\n            <div className=\"fullScreen dialogOuter\" onClick={() => props.closeDialog()} />\n        </div>\n    );\n}","import React , { useState, useEffect } from \"react\";\n\nimport './Game.css';\nimport Field from \"./Field\";\nimport StoneElement from \"./StoneElement\";\nimport AvatarSelect from \"./AvatarSelect\";\nimport Dialog from \"./Dialog\";\n\nimport { TwitterShareButton, TwitterIcon } from \"react-share\";\n\n\nconst getRandomIntInclusive = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst createEmptyField = (field_size) => {\n    return JSON.parse(JSON.stringify(Array(field_size).fill(Array(field_size).fill({\n        color: null,\n        value: 0\n    }))));\n};\n\nconst createInitField = (field_size, player_colors) => {\n    let field = createEmptyField(field_size);\n    const base_position = {row: field_size / 2 - 2, col: field_size / 2 - 2};\n\n    field[base_position.row][base_position.col] = {color: player_colors[0], value: 1};\n    field[base_position.row][base_position.col + 1] = {color: player_colors[1], value: 1};\n    field[base_position.row][base_position.col + 2] = {color: player_colors[2], value: 1};\n    field[base_position.row][base_position.col + 3] = {color: player_colors[3], value: 1};\n\n    field[base_position.row + 1][base_position.col] = {color: player_colors[1], value: 1};\n    field[base_position.row + 1][base_position.col + 1] = {color: player_colors[0], value: 1};\n    field[base_position.row + 1][base_position.col + 2] = {color: player_colors[3], value: 1};\n    field[base_position.row + 1][base_position.col + 3] = {color: player_colors[2], value: 1};\n\n    field[base_position.row + 2][base_position.col] = {color: player_colors[2], value: 1};\n    field[base_position.row + 2][base_position.col + 1] = {color: player_colors[3], value: 1};\n    field[base_position.row + 2][base_position.col + 2] = {color: player_colors[0], value: 1};\n    field[base_position.row + 2][base_position.col + 3] = {color: player_colors[1], value: 1};\n\n    field[base_position.row + 3][base_position.col] = {color: player_colors[3], value: 1};\n    field[base_position.row + 3][base_position.col + 1] = {color: player_colors[2], value: 1};\n    field[base_position.row + 3][base_position.col + 2] = {color: player_colors[1], value: 1};\n    field[base_position.row + 3][base_position.col + 3] = {color: player_colors[0], value: 1};\n\n    return field;\n};\n\n\nexport default function Game() {\n    const [isGameStart, setIsGameStart] = useState(false);\n    const [isGameEnd, setIsGameEnd] = useState(false);\n\n    const [fieldSize, setFieldSize] = useState(10);\n    const [playerNames, setPlayerNames] = useState([\"player1\", \"player2\"]);  // p1とp2の名前をランダムで入れ替えれば先行のランダム性が確保できる\n    const [playerColors, setPlayerColors] = useState([\"#000000\", \"#ff0000\", \"#0000ff\", \"#008000\"]);  // [p1, p2, p1, p2]\n\n    const [turn, setTurn] = useState(0);\n    const [fieldData, setFieldData] = useState(null);\n    const [points, setPoints] = useState([0, 0]);\n    const [settablePositions, setSettablePositions] = useState([]);\n\n    const [dialog, setDialog] = useState(false);\n\n\n    const setPlayerColor = (color, index) => {\n        let player_colors = JSON.parse(JSON.stringify(playerColors));\n        player_colors[index] = color;\n        setPlayerColors(player_colors);\n    };\n\n    const onChangePlayerName = (e) => {\n        switch(e.target.name){\n            case \"player0\":\n                setPlayerNames([e.target.value, playerNames[1]]);\n                break;\n            case \"player1\":\n                const field_size = parseInt(e.target.value);\n                if(playerNames[0] === \"size\" && !isNaN(field_size)){\n                    // 隠しコマンド(size, num)で4以上100以下の値に盤面の大きさを変えられる\n                    if(field_size >= 4 && field_size <= 100) setFieldSize(field_size);\n                }\n                setPlayerNames([playerNames[0], e.target.value]);\n                break;\n        }\n    };\n\n    const checkGameEnd = () => {\n        for(let row = 0; row < fieldData.length; row++){\n            for(let col = 0; col < fieldData[row].length; col++){\n                if(fieldData[row][col].color === null) return false;\n            }\n        }\n        return true;\n    };\n\n    const getPoints = () => {\n        let result = [0, 0];\n        for(let row = 0; row < fieldData.length; row++){\n            for(let col = 0; col < fieldData[row].length; col++){\n                for(let k = 0; k < playerColors.length; k++){\n                    if(fieldData[row][col].color === playerColors[k]){\n                        result[k % 2] += fieldData[row][col].value ** 2;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    const getSettablePositions = (color) => {\n        let settable_positions = [];\n        for(let row = 0; row < fieldSize; row++){\n            for(let col = 0; col < fieldSize; col++){\n                let position = {row: row, col: col};\n                if(fieldData[position.row][position.col].color === null){\n                    if(getReversiblePositions(position, color) != false) settable_positions.push(position);\n                }\n            }\n        }\n        return settable_positions;\n    }\n\n    const changeStoneColor = (field_data, position, color) => {\n        let new_field_data = field_data.slice();\n        let stone_data = new_field_data[position.row][position.col];\n        stone_data.color = color;\n        new_field_data[position.row][position.col] = stone_data;\n        return new_field_data;\n    };\n\n    const addStoneValue = (field_data, position, num) => {\n        let new_field_data = field_data.slice();\n        let stone_data = new_field_data[position.row][position.col];\n        stone_data.value = stone_data.value + num;\n        new_field_data[position.row][position.col] = stone_data;\n        return new_field_data;\n    };\n\n    const reverseStones = (field_data, positions, color) => {\n        let new_field_data = field_data.slice();\n\n        positions.forEach((position) => {\n            if(new_field_data[position.row][position.col].color === color) return;\n            if(new_field_data[position.row][position.col].color === null){\n                new_field_data = changeStoneColor(new_field_data, position, color);\n                new_field_data = addStoneValue(new_field_data, position, 1);\n                return new_field_data;\n            }\n\n            let color_index = null;\n            for(let i = 0; i < playerColors.length; i++){\n                if(new_field_data[position.row][position.col].color === playerColors[i]) color_index = i;\n            }\n            if(color_index === null) return;\n\n            if(turn % 2 === color_index % 2){\n                // 自分の他の色のとき\n                new_field_data = changeStoneColor(new_field_data, position, color);\n                new_field_data = addStoneValue(new_field_data, position, 1);\n            }else{\n                if(new_field_data[position.row][position.col].value >= 2){\n                    new_field_data = addStoneValue(new_field_data, position, -1);\n                }else{\n                    new_field_data = changeStoneColor(new_field_data, position, color);\n                }\n            }\n        });\n\n        return new_field_data;\n    };\n\n    const getReversiblePositions = (position, color) => {\n        const directions = [\n            [1, 0], [0, 1], [1, 1], [-1, 1]\n        ];\n\n        let reversible_positions = [JSON.parse(JSON.stringify(position))];\n        for(let i = 0; i < directions.length; i++){\n            for(let ope = -1; ope <= 1; ope += 2){\n                let now_position = JSON.parse(JSON.stringify(position));\n                let tmp_reversible_positions = [];\n                let is_detected = false;\n\n                now_position.row += ope * directions[i][0];\n                now_position.col += ope * directions[i][1];\n                while(now_position.row >= 0 && now_position.row < fieldSize && now_position.col >= 0 && now_position.col < fieldSize){\n                    if(fieldData[now_position.row][now_position.col].color === null) break;\n                    if(fieldData[now_position.row][now_position.col].color === color){\n                        is_detected = true;\n                        break;\n                    }\n\n                    tmp_reversible_positions.push(JSON.parse(JSON.stringify(now_position)));\n                    now_position.row += ope * directions[i][0];\n                    now_position.col += ope * directions[i][1];\n                }\n                if(is_detected) reversible_positions = reversible_positions.concat(tmp_reversible_positions);\n            }\n        }\n        if(reversible_positions.length <= 1) reversible_positions = [];\n        return reversible_positions;\n    };\n\n\n    const startGame = () => {\n        let player_colors = JSON.parse(JSON.stringify(playerColors));\n        if(getRandomIntInclusive(1, 2) % 2 === 0){\n            player_colors = [playerColors[1], playerColors[0], playerColors[3], playerColors[2]];\n            setPlayerNames([playerNames[1], playerNames[0]]);\n            setPlayerColors(player_colors);\n        }\n        setFieldData(createInitField(fieldSize, player_colors));\n        setIsGameStart(true);\n    };\n\n    const setStone = (position) => {\n        if(fieldData[position.row][position.col].color !== null) return;\n\n        const reversible_positions = getReversiblePositions(position, playerColors[turn % 4]);\n        if(reversible_positions == false) return;\n\n        let new_field_data = fieldData.slice();\n        new_field_data = reverseStones(new_field_data, reversible_positions, playerColors[turn % 4]);\n        setFieldData(new_field_data);\n\n\n        startNextTurn();\n    };\n\n    useEffect(() => {\n        if(fieldData === null) return;\n\n        setPoints(getPoints());\n\n        let settable_positions = getSettablePositions(playerColors[turn % 4]);\n        if(settable_positions == false){\n            settable_positions = getSettablePositions(playerColors[(turn + 1) % 4]);\n            setSettablePositions(settable_positions);\n            startNextTurn();\n        }else{\n            setSettablePositions(settable_positions);\n        }\n    }, [fieldData, turn]);\n\n    const startNextTurn = () => {\n        if(checkGameEnd()){\n            endGame();\n            return;\n        }\n\n        if(settablePositions == false){\n            startNextTurn();\n            return;\n        }\n\n        setTurn(turn + 1);\n    };\n\n    const endGame = () => {\n        setIsGameEnd(true);\n        setDialog(true);\n    };\n\n    return(\n        <div>\n            {!isGameStart ?\n                <div className=\"gameInit\">\n                    <div className=\"gameTitle\">4色リバーシ</div>\n\n                    <div>\n                        <div style={{display: \"inline-block\", marginRight: \"30px\"}}>\n                            <input name=\"player0\" type=\"text\" value={playerNames[0]} onChange={(e) => onChangePlayerName(e)} />\n                            <p>色1</p>\n                            <AvatarSelect defaultColor={playerColors[0]} setState={(avatar) => {\n                                if(!playerColors.includes(avatar)) setPlayerColor(avatar, 0);\n                            }} />\n                            <p>色2</p>\n                            <AvatarSelect defaultColor={playerColors[2]} setState={(avatar) => {\n                                if(!playerColors.includes(avatar)) setPlayerColor(avatar, 2);\n                            }} />\n                        </div>\n                        <div style={{display: \"inline-block\", marginLeft: \"30px\"}}>\n                            <input name=\"player1\" type=\"text\" value={playerNames[1]} onChange={(e) => onChangePlayerName(e)} />\n                            <p>色1</p>\n                            <AvatarSelect defaultColor={playerColors[1]} setState={(avatar) => {\n                                if(!playerColors.includes(avatar)) setPlayerColor(avatar, 1);\n                            }} />\n                            <p>色2</p>\n                            <AvatarSelect defaultColor={playerColors[3]} setState={(avatar) => {\n                                if(!playerColors.includes(avatar)) setPlayerColor(avatar, 3);\n                            }} />\n                        </div>\n                        <div style={{marginTop: \"50px\"}}>\n                            <button style={{width: \"80%\", marginLeft: \"10%\"}} type=\"button\" onClick={() => startGame()}>start</button>\n                        </div>\n                    </div>\n                </div>\n            :\n                <div>\n                    <div className={\"player1Info playerInfo\" + (turn % 2 === 0 ? \" turnPlayer\" : \"\")}>\n                        <div className=\"infoStoneFrame\">\n                            <StoneElement className=\"infoStone\" color={turn % 2 === 0 ? playerColors[(0 + turn) % 4] : playerColors[(0 + (turn+1)) % 4]} value={null} />\n                        </div>\n                        <div className=\"nextInfoStoneFrame\">\n                            <StoneElement className=\"infoStone\" color={turn % 2 === 0 ? playerColors[(2 + turn) % 4] : playerColors[(2 + (turn+1)) % 4]} value={null}  />\n                        </div>\n                        <div className=\"playerInfoName\"><span>{playerNames[0]}</span></div>\n                        <div className=\"playerInfoPoint\">{points[0]}</div>\n                    </div>\n\n                    <div className={\"player2Info playerInfo\" + (turn % 2 !== 0 ? \" turnPlayer\" : \"\")}>\n                        <div className=\"infoStoneFrame\">\n                            <StoneElement className=\"infoStone\" color={turn % 2 === 0 ? playerColors[(1 + turn) % 4] : playerColors[(1 + (turn-1)) % 4]} value={null} />\n                        </div>\n                        <div className=\"nextInfoStoneFrame\">\n                            <StoneElement className=\"infoStone\" color={turn % 2 === 0 ? playerColors[(3 + turn) % 4] : playerColors[(3 + (turn-1)) % 4]} value={null}  />\n                        </div>\n                        <div className=\"playerInfoName\"><span>{playerNames[1]}</span></div>\n                        <div className=\"playerInfoPoint\">{points[1]}</div>\n                    </div>\n\n                    <Field\n                        data={fieldData}\n                        size={fieldSize}\n                        setStone={\n                            isGameEnd ? () => {} : setStone\n                        }\n                        settablePositions={settablePositions}\n                    />\n\n                    {isGameEnd ?\n                        <div className=\"resultOpenButton\" onClick={() => setDialog(true)}>result</div>\n                    : null}\n                    <Dialog visible={dialog} closeDialog={() => setDialog(false)}>\n                        <div className=\"resultDialog\">\n                            <div className=\"resultTitle\">{points[0] === points[1] ? \"Draw!\" : (points[0] > points[1] ? playerNames[0] : playerNames[1]) + \" Win!\"}</div>\n                            <div className=\"resultPoints\">{points[0]} 対 {points[1]}</div>\n                            <div>\n                                <TwitterShareButton url=\"https://reversi.fazerog02.dev\" title={points[0] - points[1] === 0 ? \"4色リバーシで引き分けました！\" : `${Math.abs(points[0] - points[1])}点差で4色リバーシで勝利しました！`}>\n                                    <TwitterIcon size={64} round />\n                                </TwitterShareButton>\n                            </div>\n                        </div>\n                    </Dialog>\n                </div>\n            }\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}