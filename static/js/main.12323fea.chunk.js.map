{"version":3,"sources":["Stone.js","Field.js","Game.js","reportWebVitals.js","index.js"],"names":["Stone","props","stone_element","color","added_value","value","toString","className","style","backgroundColor","createStoneElement","width","size","height","border","onClick","Field","createStone","position","stone","setStone","row","col","initFieldLine","stone_line","data","push","field_stones","stone_field","initFiled","Game","onChangePlayerName","e","target","name","setPlayerNames","playerNames","createInitField","field","JSON","parse","stringify","Array","fieldSize","fill","base_position","playerColors","useState","isGameStart","setIsGameStart","isGameEnd","setIsGameEnd","turn","setTurn","fieldData","setFieldData","points","setPoints","startGame","ary","i","slice","length","r","Math","floor","random","tmp","shuffle","getPoints","result","k","endTurn","checkGameEnd","console","log","endGame","changeStoneColor","field_data","stone_data","addStoneValue","num","reverseStone","color_index","type","now_color","reversible_positions","directions","ope","now_position","tmp_reversible_positions","is_detected","concat","getReversiblePositions","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12323fea.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Game.css\";\n\n\nexport default function Stone(props){\n    const createStoneElement = () => {\n        if(props.color === null) return null;\n        const added_value = props.value <= 1 ? null : <span>{\"+\" + (props.value - 1).toString()}</span>;\n        return <div className=\"stoneElement\" style={{backgroundColor: props.color}}>{added_value}</div>\n    }\n    const stone_element = createStoneElement();\n\n    return(\n        <div style={{width: props.size, height: props.size, border: \"1px solid black\"}} onClick={() => props.onClick()}>{stone_element}</div>\n    );\n}\n","import React from \"react\";\nimport Stone from \"./Stone\";\n\nimport \"./Game.css\";\n\n\nexport default function Field(props){\n    const createStone = (position, stone) => {\n        return <Stone\n            key={position.row.toString() + position.col.toString()}\n            size={(80 / props.size).toString() + \"vmin\"}\n            color={stone.color}\n            value={stone.value}\n            onClick={() => props.setStone(position)}\n        />;\n    };\n\n    const initFieldLine = (row) => {\n        let stone_line = [];\n        for(let col = 0; col < props.size; col++){\n            const position = {row: row, col: col};\n            const stone = createStone(position, props.data[row][col]);\n            stone_line.push(stone);\n        }\n        return <div key={row.toString()} className=\"fieldLine\">{stone_line}</div>;\n    };\n\n    const initFiled = () => {\n        let stone_field = [];\n        for(let row = 0; row < props.size; row++){\n            stone_field.push(initFieldLine(row));\n        }\n        return <div className=\"field\">{stone_field}</div>;\n    };\n\n    const field_stones = initFiled();\n\n    return(\n        <div className=\"fieldWrapper\">{field_stones}</div>\n    );\n}\n","import React , { useState } from \"react\";\n\nimport './Game.css';\nimport Field from \"./Field\";\n\n\nconst shuffle = (ary) => {\n    ary = ary.slice();\n    for(let i = ary.length - 1; i > 0; i--){\n        let r = Math.floor(Math.random() * (i + 1));\n        let tmp = ary[i];\n        ary[i] = ary[r];\n        ary[r] = tmp;\n    }\n    return ary;\n};\n\n\nexport default function Game() {\n    const onChangePlayerName = (e) => {\n        switch(e.target.name){\n            case \"player0\":\n                setPlayerNames([e.target.value, playerNames[1]]);\n                break;\n            case \"player1\":\n                setPlayerNames([playerNames[0], e.target.value]);\n                break;\n        }\n    };\n\n    const createEmptyField = () => {\n        return JSON.parse(JSON.stringify(Array(fieldSize).fill(Array(fieldSize).fill({\n            color: null,\n            value: 0\n        }))));\n    };\n\n    const createInitField = () => {\n        let field = createEmptyField();\n        const base_position = {row: fieldSize / 2 - 2, col: fieldSize / 2 - 2};\n        field[base_position.row][base_position.col] = {color: playerColors[0], value: 1};\n        field[base_position.row][base_position.col + 1] = {color: playerColors[1], value: 1};\n        field[base_position.row][base_position.col + 2] = {color: playerColors[2], value: 1};\n        field[base_position.row][base_position.col + 3] = {color: playerColors[3], value: 1};\n\n        field[base_position.row + 1][base_position.col] = {color: playerColors[1], value: 1};\n        field[base_position.row + 1][base_position.col + 1] = {color: playerColors[0], value: 1};\n        field[base_position.row + 1][base_position.col + 2] = {color: playerColors[3], value: 1};\n        field[base_position.row + 1][base_position.col + 3] = {color: playerColors[2], value: 1};\n\n        field[base_position.row + 2][base_position.col] = {color: playerColors[2], value: 1};\n        field[base_position.row + 2][base_position.col + 1] = {color: playerColors[3], value: 1};\n        field[base_position.row + 2][base_position.col + 2] = {color: playerColors[0], value: 1};\n        field[base_position.row + 2][base_position.col + 3] = {color: playerColors[1], value: 1};\n\n        field[base_position.row + 3][base_position.col] = {color: playerColors[3], value: 1};\n        field[base_position.row + 3][base_position.col + 1] = {color: playerColors[2], value: 1};\n        field[base_position.row + 3][base_position.col + 2] = {color: playerColors[1], value: 1};\n        field[base_position.row + 3][base_position.col + 3] = {color: playerColors[0], value: 1};\n\n        return field;\n    };\n\n    const [isGameStart, setIsGameStart] = useState(false);\n    const [isGameEnd, setIsGameEnd] = useState(false);\n    const [turn, setTurn] = useState(0);\n    const [playerNames, setPlayerNames] = useState([\"player1\", \"player2\"]);  // p1とp2の名前をランダムで入れ替えれば先行のランダム性が確保できる\n    const [playerColors, setPlayerColors] = useState([\"black\", \"red\", \"blue\", \"green\"]);  // [p1, p2, p1, p2]\n    const [fieldSize, setFieldSize] = useState(10);\n    const [fieldData, setFieldData] = useState(null);\n    const [points, setPoints] = useState([8, 8]);\n\n    const startGame = () => {\n        setFieldData(createInitField());\n        setPlayerNames(shuffle(playerNames));\n        setIsGameStart(true);\n    };\n\n    const getPoints = () => {\n        let result = [0, 0];\n        for(let row = 0; row < fieldData.length; row++){\n            for(let col = 0; col < fieldData[row].length; col++){\n                for(let k = 0; k < playerColors.length; k++){\n                    if(fieldData[row][col].color === playerColors[k]){\n                        result[k % 2] += fieldData[row][col].value;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    const endGame = () => {\n        const result = getPoints();\n        console.log(result);\n\n        setIsGameEnd(true);\n    };\n\n    const checkGameEnd = () => {\n        for(let row = 0; row < fieldData.length; row++){\n            for(let col = 0; col < fieldData[row].length; col++){\n                if(fieldData[row][col].color === null) return false;\n            }\n        }\n        return true;\n    };\n\n    const endTurn = () => {\n        if(checkGameEnd()){\n            endGame();\n            return;\n        }\n        setPoints(getPoints());\n        setTurn(turn + 1);\n    };\n\n    const changeStoneColor = (position, color) => {\n        let field_data = fieldData.slice();\n        let stone_data = field_data[position.row][position.col];\n        stone_data.color = color;\n        field_data[position.row][position.col] = stone_data;\n        setFieldData(field_data);\n    };\n\n    const addStoneValue = (position, num) => {\n        let field_data = fieldData.slice();\n        let stone_data = field_data[position.row][position.col];\n        stone_data.value = stone_data.value + num;\n        field_data[position.row][position.col] = stone_data;\n        setFieldData(field_data);\n    };\n\n    const reverseStone = (position, color) => {\n        if(fieldData[position.row][position.col].color === color) return;\n        if(fieldData[position.row][position.col].color === null){\n            changeStoneColor(position, color);\n            addStoneValue(position, 1);\n            return;\n        }\n\n        let color_index = null;\n        for(let i = 0; i < playerColors.length; i++){\n            if(fieldData[position.row][position.col].color === JSON.parse(JSON.stringify(playerColors[i]))) color_index = i;\n        }\n        if(color_index === null) return;\n\n        if(turn % 2 === color_index % 2){\n            // 自分の他の色のとき\n            changeStoneColor(position, color);\n            addStoneValue(position, 1);\n        }else{\n            if(fieldData[position.row][position.col].value >= 2){\n                addStoneValue(position, -1);\n            }else{\n                changeStoneColor(position, color);\n            }\n        }\n    };\n\n    const getReversiblePositions = (position, color) => {\n        const directions = [\n            [1, 0], [0, 1], [1, 1], [-1, 1]\n        ];\n\n        let reversible_positions = [JSON.parse(JSON.stringify(position))];\n        for(let i = 0; i < directions.length; i++){\n            for(let ope = -1; ope <= 1; ope += 2){\n                let now_position = JSON.parse(JSON.stringify(position));\n                let tmp_reversible_positions = [];\n                let is_detected = false;\n\n                now_position.row += ope * directions[i][0];\n                now_position.col += ope * directions[i][1];\n                while(now_position.row >= 0 && now_position.row < fieldSize && now_position.col >= 0 && now_position.col < fieldSize){\n                    if(fieldData[now_position.row][now_position.col].color === null) break;\n                    if(fieldData[now_position.row][now_position.col].color === color){\n                        is_detected = true;\n                        break;\n                    }\n\n                    tmp_reversible_positions.push(JSON.parse(JSON.stringify(now_position)));\n                    now_position.row += ope * directions[i][0];\n                    now_position.col += ope * directions[i][1];\n                }\n                if(is_detected) reversible_positions = reversible_positions.concat(tmp_reversible_positions);\n            }\n        }\n        if(reversible_positions.length <= 1) reversible_positions = [];\n        return reversible_positions;\n    };\n\n    const setStone = (position) => {\n        if(fieldData[position.row][position.col].color !== null) return;\n\n        const now_color = playerColors[turn % 4];\n\n        const reversible_positions = getReversiblePositions(position, now_color);\n        if(reversible_positions == false) return;\n\n        for(let i = 0; i < reversible_positions.length; i++) reverseStone(reversible_positions[i], now_color);\n        endTurn();\n    };\n\n    return(\n        <div>\n            {!isGameStart ?\n                <div>\n                    <input name=\"player0\" type=\"text\" value={playerNames[0]} onChange={(e) => onChangePlayerName(e)} />\n                    <input name=\"player1\" type=\"text\" value={playerNames[1]} onChange={(e) => onChangePlayerName(e)} />\n                    <button type=\"button\" onClick={() => startGame()}>start</button>\n                </div>\n            :\n                <div>\n                    <div>\n                        <span>{playerNames[0]}: <span style={{color: playerColors[0]}}>{playerColors[0]}</span>, <span style={{color: playerColors[2]}}>{playerColors[2]}</span>　</span>\n                        <span>{playerNames[1]}: <span style={{color: playerColors[1]}}>{playerColors[1]}</span>, <span style={{color: playerColors[3]}}>{playerColors[3]}</span></span>\n                    </div>\n                    <span>turn: <span style={{color: playerColors[turn % 4]}}>{playerColors[turn % 4]}</span>　</span>\n                    <span>{playerNames[0]}: {points[0]}　</span>\n                    <span>{playerNames[1]}: {points[1]}</span>\n                    <div><button type=\"button\" onClick={() => endTurn()}>pass</button></div>\n                    <Field data={fieldData} size={fieldSize} setStone={isGameEnd ? () => {} : setStone} />\n                </div>\n            }\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}