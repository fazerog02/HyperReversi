{"version":3,"sources":["Stone.js","Field.js","AvatarSelect.js","Game.js","reportWebVitals.js","index.js"],"names":["Stone","props","stone_element","color","hexcolor","added_value","value","style","parseInt","substr","toString","className","background","createStoneElement","width","size","height","border","backgroundColor","isSettable","onClick","Field","createStone","position","stone","is_settable","i","settablePositions","length","row","col","setStone","initFieldLine","stone_line","data","push","field_stones","stone_field","initFiled","AvatarSelect","type","onChange","e","setState","target","onChangeColor","accept","image","files","reader","FileReader","addEventListener","result","readAsDataURL","onChangeImage","Game","onChangePlayerName","name","setPlayerNames","playerNames","field_size","isNaN","setFieldSize","setPlayerColor","index","player_colors","JSON","parse","stringify","playerColors","setPlayerColors","createEmptyField","Array","fieldSize","fill","useState","isGameStart","setIsGameStart","isGameEnd","setIsGameEnd","turn","setTurn","fieldData","setFieldData","points","setPoints","setSettablePositions","useEffect","settable_positions","getReversiblePositions","startGame","field","base_position","initField","ary","slice","r","Math","floor","random","tmp","shuffle","getPoints","k","endTurn","checkGameEnd","console","log","endGame","changeStoneColor","field_data","stone_data","addStoneValue","num","reverseStone","color_index","directions","reversible_positions","ope","now_position","tmp_reversible_positions","is_detected","concat","now_color","visibility","opacity","avatar","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c438b9d8.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Game.css\";\n\n\nexport default function Stone(props){\n    const blackOrWhite  = (hexcolor) => {\n        if(hexcolor[0] !== \"#\") return \"white\";\n\n        const r = parseInt( hexcolor.substr( 1, 2 ), 16 ) ;\n        const g = parseInt( hexcolor.substr( 3, 2 ), 16 ) ;\n        const b = parseInt( hexcolor.substr( 5, 2 ), 16 ) ;\n\n        return ( ( ( (r * 299) + (g * 587) + (b * 114) ) / 1000 ) < 128 ) ? \"white\" : \"black\" ;\n    }\n\n    const createStoneElement = () => {\n        if(props.color === null) return null;\n        const added_value = props.value <= 1 ? null : <span style={{color: blackOrWhite(props.color)}}>{\"+\" + (props.value - 1).toString()}</span>;\n        return <div className=\"stoneElement\" style={{background: props.color}}>{added_value}</div>\n    }\n    const stone_element = createStoneElement();\n\n    return(\n        <div style={{width: props.size, height: props.size, border: \"1px solid black\", backgroundColor: props.isSettable ? \"#ffa399\" : \"none\"}} onClick={() => props.onClick()}>{stone_element}</div>\n    );\n}\n","import React from \"react\";\nimport Stone from \"./Stone\";\n\nimport \"./Game.css\";\n\n\nexport default function Field(props){\n    const createStone = (position, stone) => {\n        let is_settable = false;\n        for(let i = 0; i < props.settablePositions.length; i++){\n            if(props.settablePositions[i].row === position.row && props.settablePositions[i].col === position.col){\n                is_settable  = true;\n                break;\n            }\n        }\n\n        return <Stone\n            key={position.row.toString() + position.col.toString()}\n            size={(80 / props.size).toString() + \"vmin\"}\n            color={stone.color}\n            value={stone.value}\n            isSettable={is_settable}\n            onClick={() => props.setStone(position)}\n        />;\n    };\n\n    const initFieldLine = (row) => {\n        let stone_line = [];\n        for(let col = 0; col < props.size; col++){\n            const position = {row: row, col: col};\n            const stone = createStone(position, props.data[row][col]);\n            stone_line.push(stone);\n        }\n        return <div key={row.toString()} className=\"fieldLine\">{stone_line}</div>;\n    };\n\n    const initFiled = () => {\n        let stone_field = [];\n        for(let row = 0; row < props.size; row++){\n            stone_field.push(initFieldLine(row));\n        }\n        return <div className=\"field\">{stone_field}</div>;\n    };\n\n    const field_stones = initFiled();\n\n    return(\n        <div className=\"fieldWrapper\">{field_stones}</div>\n    );\n}\n","import React from \"react\";\n\n\nexport default function AvatarSelect(props){\n    const onChangeColor = (e) => {\n        props.setState(e.target.value);\n    };\n\n    const onChangeImage = (e) => {\n        const image = e.target.files[0];\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n            props.setState(`url(${reader.result})`);\n        });\n        reader.readAsDataURL(image);\n    };\n\n    return(\n        <div>\n            <input type=\"color\" onChange={(e) => onChangeColor(e)} />\n            <input type=\"file\" accept=\"image/*\" onChange={(e) => onChangeImage(e)} />\n        </div>\n    );\n}\n","import React , { useState, useEffect } from \"react\";\n\nimport './Game.css';\nimport Field from \"./Field\";\nimport AvatarSelect from \"./AvatarSelect\";\n\n\nconst shuffle = (ary) => {\n    ary = ary.slice();\n    for(let i = ary.length - 1; i > 0; i--){\n        let r = Math.floor(Math.random() * (i + 1));\n        let tmp = ary[i];\n        ary[i] = ary[r];\n        ary[r] = tmp;\n    }\n    return ary;\n};\n\n\nexport default function Game() {\n    const onChangePlayerName = (e) => {\n        switch(e.target.name){\n            case \"player0\":\n                setPlayerNames([e.target.value, playerNames[1]]);\n                break;\n            case \"player1\":\n                const field_size = parseInt(e.target.value);\n                if(playerNames[0] === \"size\" && !isNaN(field_size)){\n                    // 隠しコマンド(size, num)で4以上100以下の値に盤面の大きさを変えられる\n                    if(field_size >= 4 && field_size <= 100) setFieldSize(field_size);\n                }\n                setPlayerNames([playerNames[0], e.target.value]);\n                break;\n        }\n    };\n\n    const setPlayerColor = (color, index) => {\n        let player_colors = JSON.parse(JSON.stringify(playerColors));\n        player_colors[index] = color;\n        setPlayerColors(player_colors);\n    };\n\n    const createEmptyField = () => {\n        return JSON.parse(JSON.stringify(Array(fieldSize).fill(Array(fieldSize).fill({\n            color: null,\n            value: 0\n        }))));\n    };\n\n    const [isGameStart, setIsGameStart] = useState(false);\n    const [isGameEnd, setIsGameEnd] = useState(false);\n    const [turn, setTurn] = useState(0);\n    const [playerNames, setPlayerNames] = useState([\"player1\", \"player2\"]);  // p1とp2の名前をランダムで入れ替えれば先行のランダム性が確保できる\n    const [playerColors, setPlayerColors] = useState([\"black\", \"red\", \"blue\", \"green\"]);  // [p1, p2, p1, p2]\n    const [fieldSize, setFieldSize] = useState(10);\n    const [fieldData, setFieldData] = useState(createEmptyField());\n    const [points, setPoints] = useState([8, 8]);\n    const [settablePositions, setSettablePositions] = useState([]);\n\n    useEffect(() => {\n        let settable_positions = [];\n        for(let row = 0; row < fieldSize; row++){\n            for(let col = 0; col < fieldSize; col++){\n                let position = {row: row, col: col};\n                if(getReversiblePositions(position) != false) settable_positions.push(position);\n            }\n        }\n        setSettablePositions(settable_positions);\n    }, [turn, fieldData]);\n\n    const initField = () => {\n        let field = createEmptyField();\n        const base_position = {row: fieldSize / 2 - 2, col: fieldSize / 2 - 2};\n\n        field[base_position.row][base_position.col] = {color: playerColors[0], value: 1};\n        field[base_position.row][base_position.col + 1] = {color: playerColors[1], value: 1};\n        field[base_position.row][base_position.col + 2] = {color: playerColors[2], value: 1};\n        field[base_position.row][base_position.col + 3] = {color: playerColors[3], value: 1};\n\n        field[base_position.row + 1][base_position.col] = {color: playerColors[1], value: 1};\n        field[base_position.row + 1][base_position.col + 1] = {color: playerColors[0], value: 1};\n        field[base_position.row + 1][base_position.col + 2] = {color: playerColors[3], value: 1};\n        field[base_position.row + 1][base_position.col + 3] = {color: playerColors[2], value: 1};\n\n        field[base_position.row + 2][base_position.col] = {color: playerColors[2], value: 1};\n        field[base_position.row + 2][base_position.col + 1] = {color: playerColors[3], value: 1};\n        field[base_position.row + 2][base_position.col + 2] = {color: playerColors[0], value: 1};\n        field[base_position.row + 2][base_position.col + 3] = {color: playerColors[1], value: 1};\n\n        field[base_position.row + 3][base_position.col] = {color: playerColors[3], value: 1};\n        field[base_position.row + 3][base_position.col + 1] = {color: playerColors[2], value: 1};\n        field[base_position.row + 3][base_position.col + 2] = {color: playerColors[1], value: 1};\n        field[base_position.row + 3][base_position.col + 3] = {color: playerColors[0], value: 1};\n\n        setFieldData(field);\n    };\n\n    const startGame = () => {\n        initField();\n        setPlayerNames(shuffle(playerNames));\n        setIsGameStart(true);\n    };\n\n    const getPoints = () => {\n        let result = [0, 0];\n        for(let row = 0; row < fieldData.length; row++){\n            for(let col = 0; col < fieldData[row].length; col++){\n                for(let k = 0; k < playerColors.length; k++){\n                    if(fieldData[row][col].color === playerColors[k]){\n                        result[k % 2] += fieldData[row][col].value ** 2;\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    const endGame = () => {\n        const result = getPoints();\n        console.log(result);\n\n        setIsGameEnd(true);\n    };\n\n    const checkGameEnd = () => {\n        for(let row = 0; row < fieldData.length; row++){\n            for(let col = 0; col < fieldData[row].length; col++){\n                if(fieldData[row][col].color === null) return false;\n            }\n        }\n        return true;\n    };\n\n    const endTurn = () => {\n        if(checkGameEnd()){\n            endGame();\n            return;\n        }\n        setPoints(getPoints());\n        setTurn(turn + 1);\n    };\n\n    const changeStoneColor = (position, color) => {\n        let field_data = fieldData.slice();\n        let stone_data = field_data[position.row][position.col];\n        stone_data.color = color;\n        field_data[position.row][position.col] = stone_data;\n        setFieldData(field_data);\n    };\n\n    const addStoneValue = (position, num) => {\n        let field_data = fieldData.slice();\n        let stone_data = field_data[position.row][position.col];\n        stone_data.value = stone_data.value + num;\n        field_data[position.row][position.col] = stone_data;\n        setFieldData(field_data);\n    };\n\n    const reverseStone = (position, color) => {\n        if(fieldData[position.row][position.col].color === color) return;\n        if(fieldData[position.row][position.col].color === null){\n            changeStoneColor(position, color);\n            addStoneValue(position, 1);\n            return;\n        }\n\n        let color_index = null;\n        for(let i = 0; i < playerColors.length; i++){\n            if(fieldData[position.row][position.col].color === JSON.parse(JSON.stringify(playerColors[i]))) color_index = i;\n        }\n        if(color_index === null) return;\n\n        if(turn % 2 === color_index % 2){\n            // 自分の他の色のとき\n            changeStoneColor(position, color);\n            addStoneValue(position, 1);\n        }else{\n            if(fieldData[position.row][position.col].value >= 2){\n                addStoneValue(position, -1);\n            }else{\n                changeStoneColor(position, color);\n            }\n        }\n    };\n\n    const getReversiblePositions = (position, color) => {\n        const directions = [\n            [1, 0], [0, 1], [1, 1], [-1, 1]\n        ];\n\n        let reversible_positions = [JSON.parse(JSON.stringify(position))];\n        for(let i = 0; i < directions.length; i++){\n            for(let ope = -1; ope <= 1; ope += 2){\n                let now_position = JSON.parse(JSON.stringify(position));\n                let tmp_reversible_positions = [];\n                let is_detected = false;\n\n                now_position.row += ope * directions[i][0];\n                now_position.col += ope * directions[i][1];\n                while(now_position.row >= 0 && now_position.row < fieldSize && now_position.col >= 0 && now_position.col < fieldSize){\n                    if(fieldData[now_position.row][now_position.col].color === null) break;\n                    if(fieldData[now_position.row][now_position.col].color === color){\n                        is_detected = true;\n                        break;\n                    }\n\n                    tmp_reversible_positions.push(JSON.parse(JSON.stringify(now_position)));\n                    now_position.row += ope * directions[i][0];\n                    now_position.col += ope * directions[i][1];\n                }\n                if(is_detected) reversible_positions = reversible_positions.concat(tmp_reversible_positions);\n            }\n        }\n        if(reversible_positions.length <= 1) reversible_positions = [];\n        return reversible_positions;\n    };\n\n    const setStone = (position) => {\n        if(fieldData[position.row][position.col].color !== null) return;\n\n        const now_color = playerColors[turn % 4];\n\n        const reversible_positions = getReversiblePositions(position, now_color);\n        if(reversible_positions == false) return;\n\n        for(let i = 0; i < reversible_positions.length; i++) reverseStone(reversible_positions[i], now_color);\n        endTurn();\n    };\n\n    return(\n        <div>\n            {!isGameStart ?\n                <div>\n                    <div>\n                        <input name=\"player0\" type=\"text\" value={playerNames[0]} onChange={(e) => onChangePlayerName(e)} />\n                        <p>色1</p>\n                        <AvatarSelect setState={(avatar) => {\n                            if(!playerColors.includes(avatar)) setPlayerColor(avatar, 0);\n                        }} />\n                        <p>色2</p>\n                        <AvatarSelect setState={(avatar) => {\n                            if(!playerColors.includes(avatar)) setPlayerColor(avatar, 2);\n                        }} />\n                    </div>\n                    <div>\n                        <input name=\"player1\" type=\"text\" value={playerNames[1]} onChange={(e) => onChangePlayerName(e)} />\n                        <p>色1</p>\n                        <AvatarSelect setState={(avatar) => {\n                            if(!playerColors.includes(avatar)) setPlayerColor(avatar, 1);\n                        }} />\n                        <p>色2</p>\n                        <AvatarSelect setState={(avatar) => {\n                            if(!playerColors.includes(avatar)) setPlayerColor(avatar, 3);\n                        }} />\n                    </div>\n                    <button type=\"button\" onClick={() => startGame()}>start</button>\n                </div>\n            :\n                <div>\n                    <div>\n                        <div>\n                            <span>{playerNames[0]}: <span style={{color: playerColors[0]}}>{playerColors[0]}</span>, <span style={{color: playerColors[2]}}>{playerColors[2]}</span>　</span>\n                            <span>{playerNames[1]}: <span style={{color: playerColors[1]}}>{playerColors[1]}</span>, <span style={{color: playerColors[3]}}>{playerColors[3]}</span></span>\n                        </div>\n                        <span>turn: <span style={{color: playerColors[turn % 4]}}>{playerColors[turn % 4]}</span>　</span>\n                        <span>{playerNames[0]}: {points[0]}　</span>\n                        <span>{playerNames[1]}: {points[1]}</span>\n                        <div><button type=\"button\" onClick={() => endTurn()}>pass</button></div>\n                        <Field data={fieldData} size={fieldSize} setStone={isGameEnd ? () => {} : setStone} settablePositions={settablePositions} />\n                    </div>\n                    <div className=\"fadeTrans fullScreen\" style={{visibility: isGameEnd ? \"visible\" : \"hidden\", opacity: isGameEnd ? 1 : 0}}>\n                        end\n                    </div>\n                </div>\n            }\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}